
package com.ripple.core.types.shamap;

import static com.ripple.core.types.shamap.ShaMapNode.NodeType.tnTRANSACTION_MD;
import static junit.framework.TestCase.assertEquals;
import static junit.framework.TestCase.assertTrue;

import java.util.*;

import com.ripple.core.serialized.BytesList;
import org.junit.Test;
import org.ripple.bouncycastle.util.encoders.Hex;

import com.ripple.config.Config;
import com.ripple.core.serialized.BinarySerializer;
import com.ripple.core.coretypes.hash.Hash256;
import com.ripple.encodings.common.B16;

public class ShaMapTest {
    static {
        Config.initBouncy();
    }

    @Test
    public void testNibblet() throws Exception {
        String ledgerIndex = "D66D0EC951FD5707633BEBE74DB18B6D2DDA6771BA0FBF079AD08BFDE6066056";
        Hash256 index = hash(ledgerIndex);

        for (int i = 0; i < ledgerIndex.length(); i++) {
            int n1 = index.nibblet(i);
            String s = Integer.toHexString(n1).toUpperCase();
            assertEquals(ledgerIndex.substring(i, i + 1), s);
        }
    }

    @Test
    public void testArrayAssumptions() throws Exception {
        String[] arr = new String[16];
        assertEquals(null, arr[0]);
        assertEquals(null, arr[15]);

        ShaMapNode[] nodes = new ShaMapNode[16];
        ShaMapLeafNode.Item item = createItem(Hash256.ZERO_256);

        ShaMapLeafNode leaf = new ShaMapLeafNode(Hash256.ZERO_256, tnTRANSACTION_MD, item);
        nodes[1] = leaf;
    }

    @Test
    public void donTestLeafNodeHashing() throws Exception {
        // Note that this is node starting with nibble `2` below
        byte[] tag = Hex.decode("A197ECCF23E55193CBE292F7A373F0DE0F521D4DCAE32484E20EC634C1ACE528");
        final byte[] node = Hex
                .decode
        ShaMapLeafNode shaMapLeafNode = new ShaMapLeafNode(new Hash256(tag), tnTRANSACTION_MD,
                new ShaMapLeafNode.Item() {
                    @Override
                    public byte[] bytes() {
                        return node;
                    }
                });
    }

    @Test
    public void testShaMapDeepNodes() {
        Hash256          // 0                                                             64
                id1 = hash("0000000000000000000000000000000000000000000000000000000000000000"),
                id2 = hash("1000000000000000000000000000000000000000000000000000000000000000"),
                id3 = hash("2100000000000000000000000000000000000000000000000000000000000000"),
                id4 = hash("2110000000000000000000000000000000000000000000000000000000000000"),
                id5 = hash("2120000000000000000000000000000000000000000000000000000000000000"),
                id6 = hash("3000000000000000000000000000000000000000000000000000000000000000");

        ensureUnique(id1, id2, id3, id4, id5, id6);

        ShaMapLeafNode.Item
                i1 = createItem(id1),
                i2 = createItem(id1),
                i3 = createItem(id1),
                i4 = createItem(id1),
                i5 = createItem(id1),
                i6 = createItem(id1);

        ShaMap map = new ShaMap();
        map.addItem(id1, tnTRANSACTION_MD, i1);
        map.addItem(id2, tnTRANSACTION_MD, i2);
        map.addItem(id3, tnTRANSACTION_MD, i3);
        map.addItem(id4, tnTRANSACTION_MD, i4);
        map.addItem(id5, tnTRANSACTION_MD, i5);
        map.addItem(id6, tnTRANSACTION_MD, i6);

        // Test leaves
        assertTrue(map.branches[0] instanceof ShaMapLeafNode);
        assertTrue(map.branches[1] instanceof ShaMapLeafNode);
        assertTrue(map.branches[3] instanceof ShaMapLeafNode);
        assertTrue(map.branches[1] instanceof ShaMapLeafNode);
        assertTrue(map.branches[2] instanceof ShaMapInnerNode);
        assertTrue(((ShaMapInnerNode) map.branches[2]).branches[1] instanceof ShaMapInnerNode);
        assertTrue(map.branches[0] instanceof ShaMapLeafNode);

    }

    private void ensureUnique(Hash256... hashes) {
        HashSet<String> s = new HashSet<String>();
        int n = 0;

        for (Hash256 hash : hashes) {
            n += 1;
            assertTrue("The " + n + "th hash is a duplicate", s.add(hash.toString()));
        }
    }

    private ShaMapLeafNode.Item createItem(final Hash256 id1) {
        return new ShaMapLeafNode.Item() {
            @Override
            public byte[] bytes() {
                return id1.bytes();
            }

        };
    }

    @Test
    public void testLedgerHashing() throws Exception {

        Hash256 tx1_hash = hash("232E91912789EA1419679A4AA920C22CFC7C6B601751D6CBE89898C26D7F4394");
        byte[] tx1 = Hex
                .decode("120007220000000024000195F964400000170A53AC2065D5460561EC9DE000000000000000000000000000494C53000000000092D705968936C419CE614BF264B5EEB1CEA47FF468400000000000000A7321028472865AF4CB32AA285834B57576B7290AA8C31B459047DB27E16F418D6A71667447304502202ABE08D5E78D1E74A4C18F2714F64E87B8BD57444AFA5733109EB3C077077520022100DB335EE97386E4C0591CAC024D50E9230D8F171EEB901B5E5E4BD6D1E0AEF98C811439408A69F0895E62149CFCC006FB89FA7D1E6E5D");
        byte[] tx1Meta = Hex
                .decode

        Hash256 tx2_hash = hash("A197ECCF23E55193CBE292F7A373F0DE0F521D4DCAE32484E20EC634C1ACE528");
        byte[] tx2 = Hex
                .decode("12000822000000002400113FCF201900113F3268400000000000000A73210256C64F0378DCCCB4E0224B36F7ED1E5586455FF105F760245ADB35A8B03A25FD7447304502200A8BED7B8955F45633BA4E9212CE386C397E32ACFF6ECE08EB74B5C86200C606022100EF62131FF50B288244D9AB6B3D18BACD44924D2BAEEF55E1B3232B7E033A27918114E0E893E991B2142E74486F7D3331CF711EA84213");
        byte[] tx2Meta = Hex
                .decode

        ShaMapLeafNode.Item n1 = createItem(tx1, tx1Meta);
        ShaMapLeafNode.Item n2 = createItem(tx2, tx2Meta);

        String node
        String node

        assertEquals(node, B16.toString(n1.bytes()));
        assertEquals(node2, B16.toString(n2.bytes()).toUpperCase());

        ShaMap ledger = new ShaMap();
        ledger.addItem(tx1_hash, tnTRANSACTION_MD, n1);
        ledger.addItem(tx2_hash, tnTRANSACTION_MD, n2);

        String tnh = "7597469704639256442E505C2291DEDF8AEC835C974BC98545D490F462343178";
        Hash256 transaction_hash = hash(tnh);

        assertTrue(transaction_hash.equals(ledger.hash()));
    }

    private ShaMapLeafNode.Item createItem(byte[] tx, byte[] meta) {
        BytesList bl = new BytesList();
        BinarySerializer s = new BinarySerializer(bl);
        s.addLengthEncoded(tx);
        s.addLengthEncoded(meta);
        final byte[] bytes = bl.bytes();
        return new ShaMapLeafNode.Item() {
            @Override
            public byte[] bytes() {
                return bytes;
            }
        };
    }

    private Hash256 hash(String tnh) {
        return Hash256.translate.fromString(tnh);
    }
}
